generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  OPS
  GENERAL
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  firstName     String?
  lastName      String?
  displayName   String?   @unique
  phoneNumber   String?
  dateOfBirth   String?
  gender        String?
  role          Role      @default(GENERAL)
  isSuperUser   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        Event[]   @relation("UserEvents")
  votes         Vote[]    @relation("UserVotes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id           String   @id @default(cuid())
  eventId      String
  userId       String
  outcomeIndex Int     // Index of the selected outcome
  event        Event   @relation("EventVotes", fields: [eventId], references: [id], onDelete: Cascade)
  user         User    @relation("UserVotes", fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([eventId, userId]) // Ensures one vote per user per event
}

model Event {
  id                 String   @id @default(cuid())
  title              String
  description        String
  category           String
  outcomes           String[] // Array of outcomes
  outcomeVotes       Int[]    // Array of vote counts for each outcome
  resolutionSource   String?
  resolutionDateTime DateTime
  status             String   @default("pending")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String
  user               User     @relation("UserEvents", fields: [userId], references: [id])
  votes              Vote[]   @relation("EventVotes")

  @@unique([title, category])
}
